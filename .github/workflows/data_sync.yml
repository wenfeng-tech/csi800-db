name: Data Sync Workflows

on:
  # 每日自动任务 (时间可以提前，例如在北京时间下午4点半)
  schedule:
    - cron: '30 8 * * *' # 每天 UTC 时间 8:30 (北京时间下午 4:30) 运行

  # 手动任务
  workflow_dispatch:
    inputs:
      sync_mode:
        description: '选择同步模式'
        required: true
        default: 'daily'
        type: choice
        options:
          - full
          - partial
          - daily
          - verify # 新增手动校验选项

jobs:
  # Job 1: 执行主要的同步任务
  run-main-sync:
    runs-on: ubuntu-latest
    outputs:
      # 输出手动触发时选择的模式，以便校验任务可以跳过
      dispatch_mode: ${{ github.event.inputs.sync_mode }}
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install akshare pandas supabase "concurrent-log-handler<1"

      - name: 🏃 Run main data sync script
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          # 如果是手动触发，则使用输入的模式
          # 如果是定时任务(schedule)，则默认为 daily
          MODE=${{ github.event.inputs.sync_mode || 'daily' }}
          echo "Running main sync with mode: $MODE"
          python sync_data.py $MODE

  # Job 2: 专门用于校验和修复数据
  run-verification-job:
    runs-on: ubuntu-latest
    # `needs` 确保这个 job 在上一个 job 结束后运行
    needs: run-main-sync
    # `if: always()` 确保无论上一个 job 成功还是失败，这个 job 都会运行
    # 但是我们不希望在手动运行 full 或 partial 时也校验，因为那没意义
    if: always() && needs.run-main-sync.outputs.dispatch_mode != 'full' && needs.run-main-sync.outputs.dispatch_mode != 'partial'
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install akshare pandas supabase "concurrent-log-handler<1"
          
      - name: ⏳ Add a delay before verification
        # 在主任务和校验任务之间增加一个延迟（例如5分钟）
        # 这可以等待API服务器解除对您IP的临时限制
        run: echo "Waiting 5 minutes for API rate limits to cool down..." && sleep 300

      - name: 🕵️ Run verification and retry script
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          echo "Running verification and retry job..."
          python sync_data.py verify
